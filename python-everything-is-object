0. What function would you use to print the type of an object?
0.Answer ==> print(type(object_name)

1. How do you get the variable identifier (which is the memory address in the CPython implementation)?
1.Answer ==>    id(variable_name)

2. In the following code, do a and b point to the same object?

>>> a = 89

>>> b = 100

2Answer ==> No

3. In the following code, do a and b point to the same object?

>>> a = 89

>>> b = 89
3Answer ==>Yes

4. In the following code, do a and b point to the same object?

>>> a = 89

>>> b = a
4Answer ==>Yes

5. In the following code, do a and b point to the same object?

>>> a = 89

>>> b = a + 1

5Answer ==>No

6. What does this print?

>>> s1 = "Best School"

>>> s2 = s1

>>> print(s1 == s2)
6Answer ==>True

7. What does this print?

>>> s1 = "Best"

>>> s2 = s1

>>> print(s1 is s2)
7Answer ==>True

8. What does this print?

>>> s1 = "Best School"

>>> s2 = "Best School"

>>> print(s1 == s2)
8Answer ==>True

9. What does this print?

>>> s1 = "Best School"

>>> s2 = "Best School"

>>> print(s1 is s2)
9Answer ==> False

10. What does this  print?

>>> l1 = [1, 2, 3]

>>> l2 = [1, 2, 3] 

>>> print(l1 == l2)
10Answer ==>True

11. What does this print?

>>> l1 = [1, 2, 3]

>>> l2 = [1, 2, 3] 

>>> print(l1 is l2)
11Answer ==>False

12. What does this print?

>>> l1 = [1, 2, 3]

>>> l2 = l1

>>> print(l1 == l2)

12Answer ==>True

13. What does this print?

>>> l1 = [1, 2, 3]

>>> l2 = l1

>>> print(l1 is l2)

13Answer ==>True

14. What does this print?

l1 = [1, 2, 3]

l2 = l1

l1.append(4)

print(l2)
14Answer ==> [1,2,3,4]

15. What does this print?

l1 = [1, 2, 3]

l2 = l1

l1 = l1 + [4]

print(l2)
15Answer ==>[1,2,3]

16. What does this print?

def increment(n):

    n += 1


a = 1

increment(a)

print(a)
16Answer ==> 1
17. What does this print?

def increment(n):

    n.append(4)


l = [1, 2, 3]

increment(l)

print(l)

17Answer ==>[1,2,3,4]

18. What does this print?

def assign_value(n, v):

    n = v


l1 = [1, 2, 3]

l2 = [4, 5, 6]

assign_value(l1, l2)

print(l1)

18Answer ==>[1,2,3]

19. What would these lines print?

>>> dict_ = {"WebDriver": "Camp"}

>>> dict_copy = dict_
print(dict_ == dict_copy)
print(dict_ is dict_copy)



>>> dict_copy = dict_.copy()
print(dict_ == dict_copy)
print(dict_ is dict_copy)
19aAnswer ==>True, True, True, False

19. What would these lines print?

>>> list_ = [1, 2, 3, 4, 5]

>>> list_copy = list_
print(list_ == list_copy)
print(list_ is list_copy)



>>> list_copy = list_.copy()
print(list_ == list_copy)
print(list_ is list_copy)

19bAnswer ==>True, True, True, False

20. Tuple or not?

a = ()
20Answer ==>Yes


21. Tuple or not?

a = (1, 2)
21Answer ==> Yes

22. Tuple or not?

a = (1)

22Answer ==> No, it is int 

23. Tuple or not?

a = (1, )

b = 1,
23Answer ==> Yes, tuple. 

24. What does this script print?

a = (1)

b = (1)

a is b

24Answer ==> False

25. What does this script print?

a = (1, 2)

b = (1, 2)

a is b

25Answer ==> False, a and b are two distinct tuple objects, and each containing the same values, but they are separate objects in memory. 
 

26. What does this print?

a = ()

b = ()

a is b
26Answer ==> True

27. What does this print?

>>> id(a)

139926795932424

>>> a

[1, 2, 3, 4]

>>> a = a + [5]

>>> id(a)

27Answer ==> different id numbers id will be different. 


28. What does this print?

>>> a

[1, 2, 3]

>>> id (a)

139926795932424

>>> a += [4]

>>> id(a)

28Answer ==> different memory address large number. 
Now make sure you can answer these questions to complete this chapter

	•	What is the difference between immutable object and mutable object
Immutable and mutable objects are two fundamental concepts relating to how data can be modified after creation: 
Immutable Objects - objects whose state or value cannot be changed after they are created. 
When you perform an operation that appears to modify an immutable object, it creates a new object with the modified value, leaving the original object unchanged. 
Examples of immutable objects in Python: integers, floating-point numbers, strings, and tuples. 
Mutable Objects - objects that can be modified after they are created. 
Changes to a mutable object made in place, so the object's state can be directly modified without creating a new object. Examples lists, dictionaries, sets, and custom objects created using classes. 
Adding or removing elements from a list in Python modifies the original list in place. 
Immutable objects used when need prevent unintended changes, while mutable objects are used when you need to modify the data efficiently. 

	•	What is a reference - value that points to an object in memory, to access this object in memory 

	•	What is an assignment - statement, used to assign a value to a variable 

	•	What is an alias - a secondary name or identifier that points to the same memory location or object as the original name or identifier. Essentially, an alias is an alternative way to access the same data or object in memory 

	•	How to know if two variables are identical - if reference point to the same object in memory 

	•	How to know if two variables are linked to the same object
        a=[1,2,3]
        b=[1,2,3]
        print(a==b) 
        True 
 
	•	What is mutable and immutable
Python’s object categorization. Mutable - changing after creation. Immutable - not 
 
	•	What are the built-in mutable types
Lists, Dictionaries, Sets, Byte Arrays, Objects in user defined classes.

	•	What are the built-in immutable types
Integers, Floats, Strings, Tuples, immutable sets.

	•	How does Python pass variables to functions
Example1:
dif name(x):
x+=10
print(x)

value = 5
name(value)
print(value)
============
#==output==
#5
#for immutable objects.

=================
Example2:
dif name1(lst):
lst.append(4)
print(lst)

my_list = [1,2,3]
name1(my_list)
print(my_list)
============
#==output==
#[1,2,3,4]
#for mutable objects.

 
 

